# This is a basic workflow to help you get started with Actions

name: CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # TODO build and lint job

  # Deploys application using the Vercel CLI
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Create deployment
      - name: Create GitHub Deployment for Development
        id: create_deployment
        uses: octokit/request-action@v2.x
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          route: POST /repos/{repo}/deployments
          repo: ${{ github.repository }}
          ref: ${{ github.ref }}
          auto_merge: false
          environment: ${{ github.event_name == 'pull_request' && 'Development' || (github.head_ref == 'main' && 'Preview' || 'Production') }}

      # Checkout
      - uses: actions/checkout@v2

      # Setup node
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
      - run: npm install

      - name: Pull Staging Secrets
        env:
          BW_PASSWORD: ${{ secrets.BW_PASSWORD }}
        run: (echo $BW_PASSWORD && cat) | npm run secrets-staging

      # Deploy using Vercel CLI
      - name: Vercel Deployment
        id: vercel_deployment
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          echo "\
            ::set-output name=DEPLOY_LINK::$( \
              (npx vercel --confirm --token $VERCEL_TOKEN >> out.log); \
              cat out.log | egrep -o 'https:\/\/bgc-safety-f2021-.+-bitsofgood.vercel.app' \
            )\
          "
          echo "::set-output name=DEPLOY_TIMESTAMP::$(date +'%Y-%m-%dT%H:%M:%S')"

      # Link deployment to GitHub Development Environment (for PRs only)
      - name: Create GitHub Deployment for Development
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repo}/deployments
          repo: ${{ github.repository }}
          ref: ${{ github.ref }}
          auto_merge: false
          environment: Development
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      # Links the Vercel Deployment to the GitHub Deployment
      - name: Link Deployment
        uses: octokit/request-action@v2.x
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          route: POST /repos/{repo}/deployments/{deployment_id}/statuses
          repo: ${{ github.repository }}
          deployment_id: ${{ fromJson(steps.create_deployment.outputs.data).id }}
          state: "success"
          target_url: ${{ steps.vercel_deployment.outputs.DEPLOY_LINK }}
          environment: ${{ github.event_name == 'pull_request' && 'Development' || (github.head_ref == 'main' && 'Preview' || 'Production') }}

      # Fails deployment if job fails or is cancelled
      - name: Fail Deployment
        if: always() && (job.status == 'failure' || job.status == 'cancelled')
        uses: octokit/request-action@v2.x
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          route: POST /repos/{repo}/deployments/{deployment_id}/statuses
          repo: ${{ github.repository }}
          deployment_id: ${{ fromJson(steps.create_deployment.outputs.data).id }}
          state: "failure"
          environment: ${{ github.event_name == 'pull_request' && 'Development' || (github.head_ref == 'main' && 'Preview' || 'Production') }}
